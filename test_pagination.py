#!/usr/bin/env python3
"""–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ 2GIS —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π - –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü."""

import sys
import os
import csv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
sys.path.insert(0, os.path.dirname(__file__))

def test_pagination():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö."""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–∏
        from parser_2gis import main as parser_main
        
        # URL –¥–ª—è –∫–∞—Ñ–µ –≤ —Ä–µ–≥–∏–æ–Ω–µ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        search_url = "https://2gis.ru/khimki/search/–∫–∞—Ñ–µ"
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        sys.argv = [
            'test_pagination.py',
            '-i', search_url,
            '-o', 'pagination_test.csv',
            '-f', 'csv',
            '--parser.max-records', '50',  # –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –ª–∏–º–∏—Ç –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            '--chrome.headless', 'no',     # –í–∏–¥–∏–º—ã–π –±—Ä–∞—É–∑–µ—Ä
            '--chrome.start-maximized', 'yes',
            '--parser.delay_between_clicks', '1500',  # 1.5 —Å–µ–∫ –∑–∞–¥–µ—Ä–∂–∫–∞
            '--writer.csv.add-rubrics', 'yes',
            '--writer.csv.add-comments', 'yes',
            '--writer.csv.columns-per-entity', '3',
            '--writer.verbose', 'yes',
        ]
        
        print(f"üîç –¢–ï–°–¢ –ü–ê–ì–ò–ù–ê–¶–ò–ò –¥–ª—è: {search_url}")
        print("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print("- 50 –∑–∞–ø–∏—Å–µ–π –º–∞–∫—Å–∏–º—É–º (–¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü)")
        print("- –í–∏–¥–∏–º—ã–π –±—Ä–∞—É–∑–µ—Ä")
        print("- –ó–∞–¥–µ—Ä–∂–∫–∞ 1.5 —Å–µ–∫ –º–µ–∂–¥—É –∫–ª–∏–∫–∞–º–∏")
        print("- –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
        print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–ï –ó–ê–ö–†–´–í–ê–ô–¢–ï –±—Ä–∞—É–∑–µ—Ä!")
        print("üìÑ –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º...\n")
        
        parser_main()
        print("\n‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        output_file = 'pagination_test.csv'
        if os.path.exists(output_file):
            print(f"\n{'='*70}")
            print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–ê–ì–ò–ù–ê–¶–ò–ò")
            print(f"{'='*70}")
            
            with open(output_file, 'r', encoding='utf-8-sig') as f:
                reader = csv.reader(f)
                headers = next(reader)
                rows = list(reader)
                
                total_records = len(rows)
                print(f"üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records}")
                
                if total_records >= 20:  # –ù–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–±—ã—á–Ω–æ ~10-15 –∑–∞–ø–∏—Å–µ–π
                    print("‚úÖ –ü–ê–ì–ò–ù–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢! –°–æ–±—Ä–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü.")
                elif total_records >= 10:
                    print("‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ –ø–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ.")
                    print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏.")
                else:
                    print("‚ùå –ü–ê–ì–ò–ù–ê–¶–ò–Ø –ù–ï –†–ê–ë–û–¢–ê–ï–¢. –ú–∞–ª–æ –∑–∞–ø–∏—Å–µ–π.")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è
                print(f"\nüìã –ù–ê–ô–î–ï–ù–ù–´–ï –ó–ê–í–ï–î–ï–ù–ò–Ø ({min(10, total_records)} –∏–∑ {total_records}):")
                for i, row in enumerate(rows[:10], 1):
                    name = row[0] if len(row) > 0 and row[0] else "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                    address = row[3] if len(row) > 3 and row[3] else "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω"
                    print(f"{i:2d}. {name} - {address}")
                
                if total_records > 10:
                    print(f"    ... –∏ –µ—â–µ {total_records - 10} –∑–∞–ø–∏—Å–µ–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–µ–π (–¥—É–±–ª–∏–∫–∞—Ç—ã –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
                names = [row[0] for row in rows if len(row) > 0 and row[0]]
                unique_names = set(names)
                duplicates = total_records - len(unique_names)
                
                if duplicates > 0:
                    print(f"\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {duplicates} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π")
                else:
                    print(f"\n‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –ø–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                
        else:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª '{output_file}' –Ω–µ —Å–æ–∑–¥–∞–Ω!")
            
    except Exception as e:
        print(f"\nüí• –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    test_pagination()